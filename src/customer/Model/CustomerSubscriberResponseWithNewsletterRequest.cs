/*
 * CDP Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = customer.Client.OpenAPIDateConverter;

namespace customer.Model
{
    /// <summary>
    /// CustomerSubscriberResponseWithNewsletterRequest
    /// </summary>
    [DataContract(Name = "customerSubscriberResponseWithNewsletterRequest")]
    public partial class CustomerSubscriberResponseWithNewsletterRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerSubscriberResponseWithNewsletterRequest" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="lastname">lastname.</param>
        /// <param name="email">email.</param>
        /// <param name="country">country.</param>
        /// <param name="gender">gender.</param>
        /// <param name="birthdate">birthdate.</param>
        /// <param name="nationality">nationality.</param>
        /// <param name="em">em.</param>
        /// <param name="preferredLocale">preferredLocale.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="newsletters">newsletters.</param>
        /// <param name="consent">consent.</param>
        public CustomerSubscriberResponseWithNewsletterRequest(string id = default(string), string name = default(string), string lastname = default(string), string email = default(string), string country = default(string), string gender = default(string), DateTime birthdate = default(DateTime), string nationality = default(string), CustomerEMFields em = default(CustomerEMFields), string preferredLocale = default(string), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), List<CustomerNewsletterRequest> newsletters = default(List<CustomerNewsletterRequest>), CustomerCreateConsentRequest consent = default(CustomerCreateConsentRequest))
        {
            this.Id = id;
            this.Name = name;
            this.Lastname = lastname;
            this.Email = email;
            this.Country = country;
            this.Gender = gender;
            this.Birthdate = birthdate;
            this.Nationality = nationality;
            this.Em = em;
            this.PreferredLocale = preferredLocale;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Newsletters = newsletters;
            this.Consent = consent;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name = "lastname", EmitDefaultValue = false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name = "email", EmitDefaultValue = false)]
        public string Email { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public string Gender { get; set; }

        /// <summary>
        /// Gets or Sets Birthdate
        /// </summary>
        [DataMember(Name = "birthdate", EmitDefaultValue = false)]
        public DateTime Birthdate { get; set; }

        /// <summary>
        /// Gets or Sets Nationality
        /// </summary>
        [DataMember(Name = "nationality", EmitDefaultValue = false)]
        public string Nationality { get; set; }

        /// <summary>
        /// Gets or Sets Em
        /// </summary>
        [DataMember(Name = "em", EmitDefaultValue = false)]
        public CustomerEMFields Em { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLocale
        /// </summary>
        [DataMember(Name = "preferredLocale", EmitDefaultValue = false)]
        public string PreferredLocale { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name = "createdAt", EmitDefaultValue = false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Newsletters
        /// </summary>
        [DataMember(Name = "newsletters", EmitDefaultValue = false)]
        public List<CustomerNewsletterRequest> Newsletters { get; set; }

        /// <summary>
        /// Gets or Sets Consent
        /// </summary>
        [DataMember(Name = "consent", EmitDefaultValue = false)]
        public CustomerCreateConsentRequest Consent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerSubscriberResponseWithNewsletterRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  Birthdate: ").Append(Birthdate).Append("\n");
            sb.Append("  Nationality: ").Append(Nationality).Append("\n");
            sb.Append("  Em: ").Append(Em).Append("\n");
            sb.Append("  PreferredLocale: ").Append(PreferredLocale).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Newsletters: ").Append(Newsletters).Append("\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
