/*
 * CDP Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = customer.Client.OpenAPIDateConverter;

namespace customer.Model
{
    /// <summary>
    /// CustomerAddressEntity
    /// </summary>
    [DataContract(Name = "customerAddressEntity")]
    public partial class CustomerAddressEntity : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name = "kind", EmitDefaultValue = false)]
        public CustomerAddressEntityKind? Kind { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomerAddressEntity" /> class.
        /// </summary>
        /// <param name="em">em.</param>
        /// <param name="name">name.</param>
        /// <param name="surname">surname.</param>
        /// <param name="street">street.</param>
        /// <param name="number">number.</param>
        /// <param name="zip">zip.</param>
        /// <param name="city">city.</param>
        /// <param name="province">province.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="fiscalCode">fiscalCode.</param>
        /// <param name="vatNumber">vatNumber.</param>
        /// <param name="kind">kind.</param>
        /// <param name="varDefault">varDefault.</param>
        /// <param name="country">country.</param>
        /// <param name="attributes">attributes.</param>
        public CustomerAddressEntity(CustomerEMFields em = default(CustomerEMFields), string name = default(string), string surname = default(string), string street = default(string), string number = default(string), string zip = default(string), string city = default(string), string province = default(string), string phoneNumber = default(string), string fiscalCode = default(string), string vatNumber = default(string), CustomerAddressEntityKind? kind = default(CustomerAddressEntityKind?), bool varDefault = default(bool), string country = default(string), Dictionary<string, ProtobufAny> attributes = default(Dictionary<string, ProtobufAny>))
        {
            this.Em = em;
            this.Name = name;
            this.Surname = surname;
            this.Street = street;
            this.Number = number;
            this.Zip = zip;
            this.City = city;
            this.Province = province;
            this.PhoneNumber = phoneNumber;
            this.FiscalCode = fiscalCode;
            this.VatNumber = vatNumber;
            this.Kind = kind;
            this.Default = varDefault;
            this.Country = country;
            this.Attributes = attributes;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Em
        /// </summary>
        [DataMember(Name = "em", EmitDefaultValue = false)]
        public CustomerEMFields Em { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Surname
        /// </summary>
        [DataMember(Name = "surname", EmitDefaultValue = false)]
        public string Surname { get; set; }

        /// <summary>
        /// Gets or Sets Street
        /// </summary>
        [DataMember(Name = "street", EmitDefaultValue = false)]
        public string Street { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name = "number", EmitDefaultValue = false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [DataMember(Name = "zip", EmitDefaultValue = false)]
        public string Zip { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = false)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Province
        /// </summary>
        [DataMember(Name = "province", EmitDefaultValue = false)]
        public string Province { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets FiscalCode
        /// </summary>
        [DataMember(Name = "fiscalCode", EmitDefaultValue = false)]
        public string FiscalCode { get; set; }

        /// <summary>
        /// Gets or Sets VatNumber
        /// </summary>
        [DataMember(Name = "vatNumber", EmitDefaultValue = false)]
        public string VatNumber { get; set; }

        /// <summary>
        /// Gets or Sets Default
        /// </summary>
        [DataMember(Name = "default", EmitDefaultValue = true)]
        public bool Default { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name = "country", EmitDefaultValue = false)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name = "attributes", EmitDefaultValue = false)]
        public Dictionary<string, ProtobufAny> Attributes { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CustomerAddressEntity {\n");
            sb.Append("  Em: ").Append(Em).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  FiscalCode: ").Append(FiscalCode).Append("\n");
            sb.Append("  VatNumber: ").Append(VatNumber).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Default: ").Append(Default).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
